# Apollo配置
apollo:
  meta: http://localhost:8080  # apollo配置中心节点
  #  cluster: SomeCluster # 指定集群
  bootstrap:
    enabled: false
    namespaces: application,routes.yml,DEVBJ.REGISTER,DEVBJ.REDIS  # 配置命名空间
    eagerLoad:
      enabled: true

#网关路由配置
spring:
  # Sleuth stream配置
  zipkin:
    sender:
      type: kafka
  sleuth:
    sampler:
      probability: 1.0
  redis:
    host: 127.0.0.1
    port: 6379
    timeout: 5000
  cloud:
    stream:
      kafka:
        binder:
          brokers: 127.0.0.1:9092
          auto-create-topics: true
    gateway:
      globalcors:
        corsConfigurations:
          "[/**]":
            allowedOrigins: "*"
            allowedMethods: [GET, HEAD, POST, PUT]
            resolvedMethods: [GET, HEAD, POST, PUT]
            allowedCredentials: true
      default-filters:
        - AddResponseHeader=X-Response-Default-Ants, Default-Easy-Cloud
      routes:
        - id: api-consumer
          order: 1000
          uri: lb://easycloud-consumer
          predicates:
            - Path=/api/feign/**
        - id: api-provider
          order: 2000
          uri: lb://easycloud-provider
          predicates:
            - Path=/test/api/provider/**
          filters:
            - StripPrefix=1
        - id: eureka_2
          order: 3001
          uri: lb://easycloud-apm-admin
          predicates:
            - Path=/admin/**
            #- Path=/registry/**
          filters:
            - StripPrefix=1
        - id: api-limiter
          order: 4000
          uri: lb://easycloud-provider
          predicates:
            - Path=/api/route/limiter/**
          filters:
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 1
                redis-rate-limiter.burstCapacity: 5
                key-resolver: "#{@remoteAddrKeyResolver}"
        - id: service1_v1
          uri: http://localhost:9011/api/route/v1
          predicates:
            - Path=/weight
            - Weight=service1,95
        - id: service1_v2
          uri: http://localhost:9011/api/route/v2
          predicates:
            - Path=/weight
            - Weight=service1,5


#Eureka注册中心配置
eureka:
  instance:
    health-check-url-path: /actuator/health
    instance-id: ${spring.application.name}:${server.port}:${random.value}
  client:
    service-url:
      defaultZone: http://ants:ants@127.0.0.1:8761/eureka/


# 服务监控跟踪配置
management:
  endpoints:
    web:
      exposure:
        include: "*"
      cors:
        allowed-origins: "*"
        allowed-methods: "*"
  endpoint:
    health:
      show-details: ALWAYS
  metrics:
    web:
      server:
        auto-time-requests: false


# 日志文件配置
logging:
  path: /usr/local/var/log/${spring.application.name}.log
  file:
    max-size: 10MB
    max-history: 100
  pattern:
    file: "%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%5p) %clr(${PID}){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n%wEx"